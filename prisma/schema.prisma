datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                    String       @id @default(cuid())
  userId                String       @map("user_id")
  type                  String?
  provider              String
  providerAccountId     String       @map("provider_account_id")
  token_type            String?
  refresh_token         String?      @db.Text
  access_token          String?      @db.Text
  expires_at            Int?
  scope                 String?
  id_token              String?      @db.Text
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  user                  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  Recipe                Recipe[]
  Rating                Rating[]
  Restaurant            Restaurant[]
  food_categories       String[]
  restaurant_categories String[]

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Recipe {
  id             Int      @id @default(autoincrement())
  collections    String[]
  cooking_time   Int
  instructions   String[]
  prep_time      Int
  serves         Int
  keywords       String[]
  rating         Int
  nutrition_info String[]
  ingredients    String[]
  courses        String[]
  cuisine        String
  diet_types     String
  skill_level    String
  post_dates     String
  images         String
  Rating         Rating[]
  name           String
  author         Account  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId       String
}

model Rating {
  id       Int     @id @default(autoincrement())
  rating   Int
  recipe   Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId Int
  author   Account @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
}

model Restaurant {
  id           Int      @id @default(autoincrement())
  yelp_id      String
  name         String
  image        String
  is_closed    Boolean
  url          String
  review_count Int
  categories   String[]
  rating       Float
  lat          Float
  long         Float
  price        String
  location     String
  phone        String
  author       Account  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String
}
