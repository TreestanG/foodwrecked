datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Recipe            Recipe[]
  Rating            Rating[]

  @@unique([provider, providerAccountId, userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Recipe {
  id             Int      @id @default(autoincrement())
  collections    String[]
  cooking_time   Int
  instructions   String[]
  prep_time      Int
  serves         Int
  keywords       String[]
  rating         Int
  nutrition_info String[]
  ingredients    String[]
  courses        String[]
  cuisine        String
  diet_types     String
  skill_level    String
  post_dates     String
  images         String
  Rating         Rating[]
  name           String
  author         Account @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId       String
}

model Rating {
  id       Int     @id @default(autoincrement())
  rating   Int
  recipe   Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId Int
  author   Account @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
}
